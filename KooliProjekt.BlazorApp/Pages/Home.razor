@page "/"
@inject IApiClient ApiClient
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<h1>Doctors</h1>

<button class="btn btn-success mb-3" @onclick="AddDoctor">Add Doctor</button>

@if (doctors == null)
{
    <p><em>Loading...</em></p>
}
else if (doctors.Count == 0)
{
    <p><em>No doctors found.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Specialization</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doctor in doctors)
            {
                <tr>
                    <td>@doctor.Name</td>
                    <td>@doctor.Specialization</td>
                    <td>
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => EditDoctor(doctor.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteDoctor(doctor.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Doctor>? doctors;

    protected override async Task OnInitializedAsync()
    {
        await LoadDoctors();
    }

    private async Task LoadDoctors()
    {
        var result = await ApiClient.List();

        if (!result.HasErrors)
        {
            doctors = result.Value!;
        }
        else
        {
            doctors = new List<Doctor>(); // Or show error
        }
    }

    private void AddDoctor()
    {
        NavigationManager.NavigateTo("/doctorform");
    }

    private void EditDoctor(int id)
    {
        NavigationManager.NavigateTo($"/doctorform/{id}");
    }

    private async Task DeleteDoctor(int id)
    {
        await ApiClient.Delete(id);
        await LoadDoctors(); // Refresh list after delete
    }
}